data:
  train:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.NATCOM.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/semantic_segmentation_pytorch/dataset/NATCOM2/train/'''
            - '''dataset/multi_classes/document_classification/VEHICLE_REGISTRATION/train'''
          classes:
            CARD_BACK_TYPE_1: 0
            CARD_FRONT_TYPE_1: 1
            CARD_BACK_TYPE_2: 2
            CARD_FRONT_TYPE_2: 3
            CARD_BACK_TYPE_3: 4
            CARD_FRONT_TYPE_3: 5 
            PASSPORT: 6
            BLX: 7
            OTHERS: 8
          image_patterns: ['''*.*g''', '''*.*G''']
          image_size: (224, 224)
          inner_size: 256
          max_transforms: 7
          required_transforms:
            - 'iaa.Grayscale(alpha=[0, 1])'
          optional_transforms:
            - 'iaa.Add(value=(-50, 50), per_channel=True)'
            - 'iaa.AdditiveGaussianNoise(loc=(-5, 5), scale=10, per_channel=True)'
            - 'iaa.Dropout(p=(0, 0.2))'
            - 'iaa.GammaContrast()'
            - 'iaa.JpegCompression(compression=(0, 50))'
            - 'iaa.GaussianBlur(sigma=(0, 2))'
            - 'iaa.MotionBlur()'
            - 'iaa.AddToHueAndSaturation(value=(-50, 50))'
            - 'iaa.PerspectiveTransform(scale=(0, 0.1))'
            - 'iaa.Pad(percent=(0, 0.1))'
            - 'iaa.Crop(percent=(0, 0.2))'
            - 'iaa.Grayscale(alpha=(0, 1))'
            - 'iaa.ChangeColorTemperature()'
            - 'iaa.Clouds()'
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: True

  train_eval:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.NATCOM.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/semantic_segmentation_pytorch/dataset/NATCOM2/train'''
            - '''dataset/multi_classes/document_classification/VEHICLE_REGISTRATION/train'''
          classes:
            CARD_BACK_TYPE_1: 0
            CARD_FRONT_TYPE_1: 1
            CARD_BACK_TYPE_2: 2
            CARD_FRONT_TYPE_2: 3
            CARD_BACK_TYPE_3: 4
            CARD_FRONT_TYPE_3: 5 
            PASSPORT: 6
            BLX: 7
            OTHERS: 8
          image_patterns: ['''*.*g''', '''*.*G''']
          image_size: (224, 224)
          inner_size: 256
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: False

  valid:
    module: torch.utils.data
    class: DataLoader
    DataLoader:
      dataset:
        module: datasets.NATCOM.dataset
        class: DocumentClassification
        DocumentClassification:
          datadirs:
            - '''/extdata/ocr/phungpx/projects/PHUNGPX/semantic_segmentation_pytorch/dataset/NATCOM2/valid/'''
            - '''dataset/multi_classes/document_classification/VEHICLE_REGISTRATION/valid/'''
          classes:
            CARD_BACK_TYPE_1: 0
            CARD_FRONT_TYPE_1: 1
            CARD_BACK_TYPE_2: 2
            CARD_FRONT_TYPE_2: 3
            CARD_BACK_TYPE_3: 4
            CARD_FRONT_TYPE_3: 5 
            PASSPORT: 6
            BLX: 7
            OTHERS: 8
          image_patterns: ['''*.*g''', '''*.*G''']
          image_size: (224, 224)
          inner_size: 256
      batch_size: 128
      pin_memory: True
      num_workers: 12
      drop_last: False
      shuffle: False


loss:
  module: loss.loss
  class: Loss
  Loss:
    loss_fn:
      module: torch.nn
      class: CrossEntropyLoss
    output_transform: 'lambda x: (x[0], x[1])'

model:
  module: models.mobilenets
  class: MobileNetV3Small
  MobileNetV3Small:
    num_classes: 9
    pretrained: True

# optimizer:
#   module: torch.optim
#   class: SGD
#   SGD:
#     params: config['model'].parameters()
#     lr: 0.001
#     momentum: 0.92

optimizer:
  module: torch.optim
  class: Adam
  Adam:
    params: config['model'].parameters()
    lr: 0.001
    amsgrad: True

early_stopping:
  module: handler.early_stopping
  class: EarlyStopping
  EarlyStopping:
    patience: 20
    verbose: True
    delta: 0
    mode: '''min'''
    monitor: '''valid_loss'''
    
metrics:
  module: metrics.metrics
  class: Metric
  Metric:
    metric:
      accuracy:
        module: metrics.metric_funcs
        class: Accuracy
      loss:
        module: torch.nn
        class: CrossEntropyLoss
    output_transform: 'lambda x: (x[0], x[1])'

tensorboard:
  module: handler.tensorboard
  class: TensorBoard
  TensorBoard:
    tb_dir: '''runs/NATCOM/'''

logger:
  module: handler.logger
  class: Logger
  Logger:
    log_mode: logging.DEBUG
    log_formatter: '''%(asctime)s - %(name)s - %(levelname)s - %(message)s'''

lr_scheduler:
  module: torch.optim.lr_scheduler
  class: ReduceLROnPlateau
  ReduceLROnPlateau:
    optimizer: config['optimizer']
    mode: '''min'''
    factor: 0.1
    patience: 5
    verbose: True


extralibs:
  torch: torch
  iaa: imgaug.augmenters
  logging: logging
  torchvision: torchvision
  transforms: torchvision.transforms